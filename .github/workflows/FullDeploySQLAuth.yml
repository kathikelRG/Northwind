# This is a basic workflow to help you get started with Actions
 
name: deployToProductionSQLAuth-Workflow
 
# Controls when the workflow will run
on:
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
env:
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true 
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: [self-hosted, sqlauth]
    environment: 'build' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    env:
      userName: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}  
      JDBC: ${{ vars.JDBC_SQLAUTH }}
      
       # Environment Secrets - In Real Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      databaseName: "Northwind_Build"
      stage: 'Build'
      displayName: 'Build'
      executeBuild: true
      publishArtifacts: true

     
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Runs the Flyway Clean command against the Build database
      - name: Clean Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info clean info -user="$env:userName" -password="$env:password" -baselineOnMigrate="true"   -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations"  -url="${{ env.JDBC }}" -cleanDisabled="false"
        
      # Runs the Flyway Migrate command against the Build database
      - name: Migrate Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway info migrate info -user="$env:username" -password="$env:password" -baselineOnMigrate="true"  -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations"  -url="${{ env.JDBC }}" 
          
     
       # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}/migrations Artifact_Files/Migration/
 
      
      #After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v2
        with: 
          name: flyway-build-artifact
          path: Artifact_Files/Migration/
 
  test:
    name: Deploy Test 
    # The type of runner that the job will run on
    runs-on: [self-hosted, sqlauth]
    environment: 'test' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    needs: build
    env:
      userName: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}
      JDBC: ${{ vars.JDBC_SQLAUTH }}
      
      databaseName: "Northwind_test"
      stage: 'Test'
      displayName: 'test'
      executeBuild: true
      
  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
     
      # Runs the Flyway Migrate command against the test database
      - name: Migrate test DB
        if: env.executeBuild == 'true'
        run: |
          flyway -user="$env:username" -password="$env:password" -baselineOnMigrate="true"  -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" info migrate info -url="${{ env.JDBC }}" 
          

   

  prod:
    name: Deploy Production
    # The type of runner that the job will run on
    runs-on: [self-hosted, sqlauth]
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: test
    env:

      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      JDBC: ${{ vars.JDBC_SQLAUTH }} 
      stage: 'Prod'
      databaseName: "Northwind"

 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Production DB
        if: ${{ true }}
        run: |
          flyway -user="$env:username" -password="$env:password" -baselineOnMigrate="true"  -configFiles="${{ GITHUB.WORKSPACE }}\flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}\migrations" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='false'
          echo test, and deploy your project.